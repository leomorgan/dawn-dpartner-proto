import { NextRequest, NextResponse } from 'next/server';
import { readFile } from 'fs/promises';
import { join } from 'path';
import { existsSync } from 'fs';
import archiver from 'archiver';

export async function GET(
  request: NextRequest,
  { params }: { params: { runId: string } }
) {
  try {
    const { runId } = params;

    if (!runId) {
      return NextResponse.json({
        success: false,
        error: 'Run ID is required'
      }, { status: 400 });
    }

    const baseDir = join(process.cwd(), 'artifacts');
    const runDir = join(baseDir, runId);
    const ctaDir = join(runDir, 'cta');

    // Check if CTA artifacts exist
    if (!existsSync(ctaDir)) {
      return NextResponse.json({
        success: false,
        error: 'CTA artifacts not found'
      }, { status: 404 });
    }

    // Create a ZIP archive
    const archive = archiver('zip', {
      zlib: { level: 9 }
    });

    // Create a readable stream from the archive
    const chunks: Buffer[] = [];
    archive.on('data', (chunk) => chunks.push(chunk));
    archive.on('error', (err) => {
      throw err;
    });

    // Add files to archive
    const files = [
      { path: 'CTATemplate.tsx', name: 'CTATemplate.tsx' },
      { path: 'styles.json', name: 'styles.json' },
      { path: 'template.css', name: 'template.css' },
      { path: 'metadata.json', name: 'metadata.json' }
    ];

    for (const file of files) {
      const filePath = join(ctaDir, file.path);
      if (existsSync(filePath)) {
        const content = await readFile(filePath);
        archive.append(content, { name: file.name });
      }
    }

    // Add design tokens if available
    const tokensPath = join(runDir, 'design_tokens.json');
    if (existsSync(tokensPath)) {
      const tokensContent = await readFile(tokensPath);
      archive.append(tokensContent, { name: 'design_tokens.json' });
    }

    // Add README
    const readmeContent = `# CTA Template - ${runId}

This archive contains a generated CTA template with extracted design tokens.

## Files

- \`CTATemplate.tsx\` - React component code
- \`template.css\` - CSS variables extracted from design tokens
- \`styles.json\` - Applied styling configuration
- \`design_tokens.json\` - Raw extracted design tokens
- \`metadata.json\` - Generation metadata

## Usage

1. Copy the CTATemplate.tsx file to your React project
2. Include the CSS variables from template.css in your stylesheet
3. Import and use the component in your application

## Generated by AI Design Partner

This template was generated using the AI Design Partner CTA pipeline.
Visit https://github.com/anthropics/claude-code for more information.
`;

    archive.append(readmeContent, { name: 'README.md' });

    // Finalize archive
    await archive.finalize();

    // Wait for all chunks to be collected
    await new Promise((resolve) => {
      archive.on('end', resolve);
    });

    // Combine all chunks
    const buffer = Buffer.concat(chunks);

    // Return ZIP file
    const response = new NextResponse(buffer);
    response.headers.set('Content-Type', 'application/zip');
    response.headers.set('Content-Disposition', `attachment; filename="cta-template-${runId}.zip"`);
    response.headers.set('Content-Length', buffer.length.toString());

    return response;

  } catch (error) {
    console.error('Error creating download:', error);
    return NextResponse.json({
      success: false,
      error: 'Failed to create download'
    }, { status: 500 });
  }
}