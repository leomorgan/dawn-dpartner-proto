import { NextRequest, NextResponse } from 'next/server';
import { readFile, readdir } from 'fs/promises';
import { join } from 'path';
import { existsSync } from 'fs';
import archiver from 'archiver';
import { Readable } from 'stream';

export async function GET(
  request: NextRequest,
  { params }: { params: { runId: string } }
) {
  try {
    const { runId } = params;

    if (!runId) {
      return NextResponse.json({
        success: false,
        error: 'Run ID is required'
      }, { status: 400 });
    }

    const baseDir = join(process.cwd(), 'artifacts');
    const runDir = join(baseDir, runId);

    // Check if run directory exists
    if (!existsSync(runDir)) {
      return NextResponse.json({
        success: false,
        error: 'Run not found'
      }, { status: 404 });
    }

    const componentsDir = join(runDir, 'components');
    if (!existsSync(componentsDir)) {
      return NextResponse.json({
        success: false,
        error: 'No components found for this run'
      }, { status: 404 });
    }

    // Create a zip archive
    const archive = archiver('zip', {
      zlib: { level: 9 } // Maximum compression
    });

    // Set response headers for file download
    const headers = new Headers({
      'Content-Type': 'application/zip',
      'Content-Disposition': `attachment; filename="ai-components-${runId}.zip"`,
    });

    const stream = new ReadableStream({
      start(controller) {
        archive.on('data', (chunk) => {
          controller.enqueue(new Uint8Array(chunk));
        });

        archive.on('end', () => {
          controller.close();
        });

        archive.on('error', (err) => {
          controller.error(err);
        });

        // Start building the zip file
        buildZipArchive(archive, runDir, componentsDir);
      }
    });

    return new Response(stream, { headers });

  } catch (error) {
    console.error('❌ Download generation failed:', error);

    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Download generation failed'
    }, { status: 500 });
  }
}

async function buildZipArchive(archive: archiver.Archiver, runDir: string, componentsDir: string) {
  try {
    // Add all component files
    const componentFiles = await readdir(componentsDir);
    for (const file of componentFiles) {
      const filePath = join(componentsDir, file);
      const content = await readFile(filePath, 'utf8');
      archive.append(content, { name: `components/${file}` });
    }

    // Add CSS styles if available
    const cssPath = join(runDir, 'styles.css');
    if (existsSync(cssPath)) {
      const cssContent = await readFile(cssPath, 'utf8');
      archive.append(cssContent, { name: 'styles.css' });
    }

    // Add CSS variables if available
    const cssVarsPath = join(runDir, 'css_vars.css');
    if (existsSync(cssVarsPath)) {
      const cssVarsContent = await readFile(cssVarsPath, 'utf8');
      archive.append(cssVarsContent, { name: 'css_vars.css' });
    }

    // Add design tokens
    const tokensPath = join(runDir, 'design_tokens.json');
    if (existsSync(tokensPath)) {
      const tokensContent = await readFile(tokensPath, 'utf8');
      archive.append(tokensContent, { name: 'design_tokens.json' });
    }

    // Add tailwind config if available
    const tailwindPath = join(runDir, 'tailwind.config.js');
    if (existsSync(tailwindPath)) {
      const tailwindContent = await readFile(tailwindPath, 'utf8');
      archive.append(tailwindContent, { name: 'tailwind.config.js' });
    }

    // Add package.json with dependencies
    const packageJson = {
      name: `ai-generated-components-${runDir.split('/').pop()}`,
      version: '1.0.0',
      description: 'AI generated React components with Tailwind CSS',
      main: 'components/index.ts',
      scripts: {
        dev: 'next dev',
        build: 'next build',
        start: 'next start',
        lint: 'next lint'
      },
      dependencies: {
        react: '^18.0.0',
        'react-dom': '^18.0.0',
        next: '^14.0.0',
        'tailwindcss': '^3.4.0',
        '@types/node': '^20.0.0',
        '@types/react': '^18.0.0',
        '@types/react-dom': '^18.0.0',
        typescript: '^5.0.0'
      },
      devDependencies: {
        'eslint': '^8.0.0',
        'eslint-config-next': '^14.0.0'
      }
    };

    archive.append(JSON.stringify(packageJson, null, 2), { name: 'package.json' });

    // Add README file
    const readmeContent = `# AI Generated Components

This package contains React components generated by the AI Design Partner pipeline.

## Generated Artifacts

- \`components/\` - React TypeScript components
- \`styles.css\` - Generated CSS with design tokens
- \`design_tokens.json\` - Extracted design tokens
- \`tailwind.config.js\` - Tailwind configuration (if available)

## Setup

1. Install dependencies:
   \`\`\`bash
   npm install
   \`\`\`

2. Use the components in your React application:
   \`\`\`tsx
   import { MainColumnContainer } from './components';
   import './styles.css';

   function App() {
     return <MainColumnContainer />;
   }
   \`\`\`

## Generated by AI Design Partner

- Run ID: ${runDir.split('/').pop()}
- Generated: ${new Date().toISOString()}
- Pipeline: Web Capture → Design Tokens → Layout → Styling → Code Generation

For more information, visit: https://github.com/your-repo/ai-design-partner
`;

    archive.append(readmeContent, { name: 'README.md' });

    // Finalize the archive
    archive.finalize();

  } catch (error) {
    console.error('❌ Failed to build zip archive:', error);
    throw error;
  }
}